Here‚Äôs a step-by-step guide to set up **Prisma** in your project:

---

### üìù **Step 1: Install Prisma CLI and Prisma Client**  

In your project directory, install Prisma and its client:  
```bash
npm install prisma --save-dev
npm install @prisma/client
```

---

### üèóÔ∏è **Step 2: Initialize Prisma**  

Run this command to initialize Prisma:  
```bash
npx prisma init
```

This creates:  
- A `prisma/` folder with a `schema.prisma` file.  
- A `.env` file with a placeholder `DATABASE_URL`.

---

### üóÑÔ∏è **Step 3: Configure Your Database**  

1. Open `.env` and set your database URL:  
   ```env
   DATABASE_URL="postgresql://user:password@localhost:5432/mydb"
   ```
   *(Replace with your actual DB credentials.)*

2. In `prisma/schema.prisma`, configure the datasource and client generator:  
   ```prisma
   generator client {
     provider = "prisma-client-js"
   }

   datasource db {
     provider = "postgresql" // or "mysql", "sqlite", etc.
     url      = env("DATABASE_URL")
   }
   ```

---

### üìù **Step 4: Define Your Data Models**  

Inside `schema.prisma`, define your models:  
```prisma
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}
```

---

### üì§ **Step 5: Push Schema to Database**  

To apply the models to your database, run:  
```bash
npx prisma db push
```
*(Alternatively, use `npx prisma migrate dev --name init` for migrations.)*

---

### ‚ö° **Step 6: Generate Prisma Client**  

Generate the client for use in your code:  
```bash
npx prisma generate
```

---

### üñ•Ô∏è **Step 7: Use Prisma Client in Code**  

Example usage in your project:  
```ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  const newUser = await prisma.user.create({
    data: { name: "Alice", email: "alice@example.com" },
  });
  console.log(newUser);
}

main().catch(console.error).finally(() => prisma.$disconnect());
```

---

### üöÄ **Step 8 (Optional): Use Prisma Studio**  

For a visual interface to your data, run:  
```bash
npx prisma studio
```

---

Let me know if you need help with a specific database or further setup! üòä


________________________________________________________________________________________________________________________________________________________________


Here‚Äôs a step-by-step guide to setting up **Prisma** in **Next.js 15**:

---

### üõ†Ô∏è **Step 1: Install Prisma and Prisma Client**  

In your Next.js project directory, install Prisma:  
```bash
npm install prisma --save-dev
npm install @prisma/client
```

---

### üì¶ **Step 2: Initialize Prisma**  

Generate the Prisma setup files:  
```bash
npx prisma init
```

This creates:  
- `prisma/schema.prisma` for database schema.  
- `.env` file for environment variables.

---

### üóÑÔ∏è **Step 3: Configure Your Database**  

1. In `.env`, set your database URL:  
   ```env
   DATABASE_URL="postgresql://user:password@localhost:5432/mydb"
   ```

2. In `prisma/schema.prisma`:  
   ```prisma
   generator client {
     provider = "prisma-client-js"
   }

   datasource db {
     provider = "postgresql" // Change to "mysql", "sqlite", etc., as needed
     url      = env("DATABASE_URL")
   }

   model User {
     id    Int    @id @default(autoincrement())
     name  String
     email String @unique
   }
   ```

---

### üèóÔ∏è **Step 4: Apply Database Changes**  

To push your schema to the database:  
```bash
npx prisma db push
```

Or use migrations:  
```bash
npx prisma migrate dev --name init
```

---

### ‚öôÔ∏è **Step 5: Generate Prisma Client**  

Generate the client to use in your app:  
```bash
npx prisma generate
```

---

### üìù **Step 6: Setup Prisma Client in Next.js**  

To avoid multiple Prisma Client instances during hot reload in development:

1. **Create a `lib/prisma.ts` file:**  
   ```ts
   import { PrismaClient } from '@prisma/client';

   const globalForPrisma = global as unknown as { prisma: PrismaClient };

   export const prisma =
     globalForPrisma.prisma ||
     new PrismaClient({
       log: ['query'],
     });

   if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
   ```

2. **Why this setup?**  
   - Prevents creating new Prisma clients on every API call in development.  
   - Uses a global instance for hot-reloading safety.

---

### üåê **Step 7: Use Prisma in API Routes**  

Example API route: `pages/api/users.ts`  
```ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '@/lib/prisma';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    const users = await prisma.user.findMany();
    res.status(200).json(users);
  } else if (req.method === 'POST') {
    const { name, email } = req.body;
    const user = await prisma.user.create({ data: { name, email } });
    res.status(201).json(user);
  } else {
    res.setHeader('Allow', ['GET', 'POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

---

### üöÄ **Step 8: Run Your Project**  

Start the development server:  
```bash
npm run dev
```

Test your API endpoint at `http://localhost:3000/api/users`.

---

### üñ•Ô∏è **Step 9 (Optional): Use Prisma Studio**  

For a GUI to view and edit your data:  
```bash
npx prisma studio
```

---

‚úÖ **All set!** Your Next.js 15 project now has Prisma fully integrated. Let me know if you need help with middleware, authentication, or further enhancements! üòä


________________________________________________________________________________________________________________________________________________________________




# Development environment variables
GITHUB_ID=YOUR_GITHUB_ID
GITHUB_SECRET=YOUR_GITHUB_SECRET
GITHUB_CALLBACK_URL=http://localhost:3001
NEXTAUTH_SECRET=RANDOM_SECRET
NEXTAUTH_URL=http://localhost:3001
DATABASE_URL="YOUR_PRISMA_DB_URL"



GithubProvider({
  clientId: process.env.GITHUB_ID as string,
  clientSecret: process.env.GITHUB_SECRET as string,
  authorization: {
    params: { redirect_uri: process.env.GITHUB_CALLBACK_URL },
  },
}),
